[project]
name = "oa-ontology"
version = "0.1.0"
description = "OpenAccess Ontology Explorer - Extract and analyze the ontology of the Cadence OpenAccess API"
authors = [
    {name = "Robert Taylor", email = "rob.taylor@chipflow.io"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
dependencies = [
    "networkx>=2.8.0,<3.2",
    "pyyaml>=6.0",
    "tqdm>=4.64.0", 
    "beautifulsoup4>=4.11.0",
    "tomli>=2.0.0",
    "pyvis>=0.3.2",
    "lxml>=5.3.1",
    "numpy>=1.23.0,<2.0",
    "pytesseract>=0.3.13",
    "opencv-python>=4.11.0.86",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.scripts]
# Core ontology building tools
setup = {call = "oa_ontology.init:main", help = "Download and setup the OpenAccess documentation"}
parse = {call = "oa_ontology.parse_html:main", help = "Parse HTML documentation into YAML format"}
build = {call = "oa_ontology.build_ontology:main", help = "Build the software class ontology"}
domain = {call = "oa_ontology.extract_domain_ontology:main", help = "Extract domain concepts from class ontology"}
export = {call = "oa_ontology.export_to_neo4j:main", help = "Export ontology to Neo4j-compatible format"}
visualize = {call = "oa_ontology.visualize_ontology:main", help = "Generate visualizations of the ontology"}
run-all = {call = "oa_ontology.run_all:main", help = "Run all ontology extraction and processing steps"}

# Schema and structure tools
schema = {call = "oa_ontology.schema_to_yaml:main", help = "Convert schema to YAML format"}
uml-to-yaml = {call = "oa_ontology.structure_to_yaml:main", help = "Convert UML structure to YAML format"}
combine-schema = {call = "oa_ontology.combine_schema_structures:main", help = "Combine multiple schema structures"}

# UML parsing tools
parse-uml = {call = "scripts.parse_all_diagrams:main", help = "Parse UML diagrams using computer vision"}
parse-imagemap = {call = "scripts.parse_all_imagemaps:main", help = "Parse HTML image maps for UML information"}
imagemap = {call = "oa_ontology.html_imagemap_parser:main", help = "Extract UML structure from HTML image maps"}
test-uml-parser = {call = "scripts.test_improved_parser:main", help = "Test the improved UML parser"}
test-structure-parser = {call = "scripts.test_structure_parser:main", help = "Test the UML structure parser"}

# Documentation extraction
doc-extract = {call = "oa_ontology.html_doc_extractor:main", help = "Extract API documentation from HTML"}
debug-extraction = {call = "scripts.debug_extraction:main", help = "Debug HTML parsing issues"}
process-busterm = {call = "scripts.process_busterm:main", help = "Extract and verify oaBusTerm information"}

# Cross-referencing
crossref = {call = "scripts.run_crossref:main", help = "Cross-reference UML diagrams with API documentation"}
validate-crossref = {call = "scripts.validate_crossref:main", help = "Validate cross-referenced data quality"}

# Enhanced domain ontology
enhanced-domain = {call = "scripts.run_enhanced_domain:main", help = "Generate enhanced domain ontology"}
fix-enhanced = {call = "scripts.fix_enhanced_ontology:main", help = "Fix enhanced ontology structure for visualization"}
fix-bundleterm = {call = "scripts.fix_bundle_term:main", help = "Fix issues with oaBundleTerm class description"}

# Visualization
vis-connected = {
    call = "scripts.visualize_connected_classes:main", 
    help = "Create visualization of most connected classes without inheritance"
}
vis-enhanced = {
    call = "scripts.visualize_enhanced_domain:main", 
    help = "Create domain-specific visualizations"
}
create-vis-graph = {
    call = "oa_ontology.create_visualization_graph:main", 
    help = "Create simplified graph for visualization"
}

[project.urls]
Homepage = "https://github.com/username/oa-ontology"
Documentation = "https://github.com/username/oa-ontology#readme"
Repository = "https://github.com/username/oa-ontology.git"
Issues = "https://github.com/username/oa-ontology/issues"

# Configuration for the ontology explorer
[tool.oa-ontology]
html_repo = "https://github.com/oa22doc/oa22doc.github.io"
modules = ["design", "base", "tech", "cms", "wafer", "block"]

[tool.oa-ontology.default_directories]
html_dir = "html_source"
yaml_dir = "yaml_output"
ontology_dir = "ontology_output"

[tool.pdm]
distribution = true


[dependency-groups]
dev = [
    "black>=23.3.0",
    "pylint>=2.17.0",
    "pytest>=7.3.1",
]
